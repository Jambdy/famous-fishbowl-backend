AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  famous-fishbowl-backend

  Sample SAM Template for famous-fishbowl-backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
  Api:
    Cors:
      AllowMethods: "'OPTIONS,PUT,GET,DELETE'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  FamousFishbowlGetGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: famous_fishbowl_CRUD/
      Handler: game_get.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        GetGame:
          Type: Api
          Properties:
            RestApiId: !Ref FamousFishbowlAPI
            Path: /games/{id}
            Method: get
            Auth:
              ApiKeyRequired: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FishbowlDynamoDB

  FamousFishbowlCreateGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: famous_fishbowl_CRUD/
      Handler: game_create.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        PutGame:
          Type: Api
          Properties:
            RestApiId: !Ref FamousFishbowlAPI
            Path: /games
            Method: post
            Auth:
              ApiKeyRequired: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FishbowlDynamoDB

  FamousFishbowlUpdateGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: famous_fishbowl_CRUD/
      Handler: game_update.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        PutGame:
          Type: Api
          Properties:
            RestApiId: !Ref FamousFishbowlAPI
            Path: /games/{id}
            Method: put
            Auth:
              ApiKeyRequired: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FishbowlDynamoDB

  FamousFishbowlAddNamesGameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: famous_fishbowl_CRUD/
      Handler: game_add_names.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        PutGame:
          Type: Api
          Properties:
            RestApiId: !Ref FamousFishbowlAPI
            Path: /games/add-names/{id}
            Method: put
            Auth:
              ApiKeyRequired: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FishbowlDynamoDB

  FamousFishbowlCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: famous_fishbowl_CRUD/
      Handler: categories.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Events:
        GetCategories:
          Type: Api
          Properties:
            RestApiId: !Ref FamousFishbowlAPI
            Path: /categories
            Method: get
            Auth:
              ApiKeyRequired: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FishbowlDynamoDB

  FishbowlDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: famous-fishbowl
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: indexField_0
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: localSecondaryIndex_0
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: indexField_0
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  FamousFishbowlAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: GatewayAuthorization
      Domain:
        DomainName: api.fishbowl.jabdy.com
        CertificateArn: arn:aws:acm:us-east-1:415161357326:certificate/c3cd9fdb-3af1-486e-88d1-2d82cca037e2
        Route53:
          HostedZoneId: ZR3BE3YX6UN94

  FamousFishbowlWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: FamousFishbowlWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref FamousFishbowlWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref FamousFishbowlWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations

  UpdateGameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref FamousFishbowlWebSocket
      RouteKey: updateGame
      AuthorizationType: NONE
      OperationName: UpdateGame
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref UpdateGameInteg

  UpdateGameInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref FamousFishbowlWebSocket
      Description: Update Game Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateGameWebSocketFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - DisconnectRoute
      - UpdateGameRoute
    Properties:
      ApiId: !Ref FamousFishbowlWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref FamousFishbowlWebSocket

  WebSocketCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: socket.fishbowl.jabdy.com
      DomainNameConfigurations:
        - CertificateArn: arn:aws:acm:us-east-1:415161357326:certificate/c3cd9fdb-3af1-486e-88d1-2d82cca037e2

  WebSocketCustomDomainMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref FamousFishbowlWebSocket
      DomainName: socket.fishbowl.jabdy.com
      Stage: !Ref Stage

  WebSocketCustomDomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: ZR3BE3YX6UN94
      Name: socket.fishbowl.jabdy.com
      Type: A
      AliasTarget:
        DNSName: !Ref WebSocketCustomDomain
        HostedZoneId: ZR3BE3YX6UN94

  WebSocketCustomDomainRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: ZR3BE3YX6UN94
      RecordSets:
        - Name: socket.fishbowl.jabdy.com
          Type: A
          AliasTarget:
            DNSName: !GetAtt WebSocketCustomDomain.RegionalDomainName
            HostedZoneId: !GetAtt WebSocketCustomDomain.RegionalHostedZoneId

  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: web_socket_lambdas/
      Handler: disconnect.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FishbowlDynamoDB

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - FamousFishbowlWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com

  UpdateGameWebSocketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: web_socket_lambdas/
      Handler: update_game.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FishbowlDynamoDB
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FamousFishbowlWebSocket}/*'

  UpdateGamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - FamousFishbowlWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateGameWebSocketFunction
      Principal: apigateway.amazonaws.com

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  FamousFishbowlAPI:
    Value: !Sub "https://${FamousFishbowlAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/games/"